//FUNCIONES:

//activaciones por flanco de subida
void pulsoColumna(); //flanco al shift register clock del integrado derecho
void pulsoFila();    //flanco al shift register clock del integrado izquierdo
void coutpulso();    //flanco al output register clock de ambos integrados

//VERIFICACIÓN DE TODOS LOS LEDS
void verificacion();
//otras
void flancoMatriz(int);//recibe el tiempo que se mostrará la verificacion
	void apagarMatriz();
	void encenderMatriz();

//MOSTRAR IMAGEN EN LA MATRIZ
void IMAGEN();
void imagen(unsigned long);
//otras
void digitosfila(long int, int numeros[]);//cada digito de un long int lo ingresa a un array
void led(int, int numerosfilas[][8]);//enciende los leds de una fila de acuerdo a un arreglo

//librería abecedario
void A();

//----------------------------------------------------------------

//DEFINO LOS PINES DE ENTRADA:

//input que controlará las entradas de ambos integrados
#define SER 4

//columnas:
//registro de almacenamiento de las columnas
#define columnaEtapa1 6

//filas:
//registro de almacenamiento de las filas
#define filaEtapa1 10

//registro de salida de ambos integrados:
#define Etapa2 5

//----------------------------------------------------------------

void setup()
{
  //inicializo el puerto serial
  Serial.begin(9600);
  
  //inicializo los pines digitales como salidas y en bajo
  int pines[4]={4,6,5,10};
  for(int i=0;i<4;i++)
  {
	pinMode(pines[i], OUTPUT);
	digitalWrite(pines[i], LOW);
  }
  
  //inicio el programa con la matriz apagada
  apagarMatriz(); 
  
  //Mensaje de bienvenida
  Serial.print("Bienvenido.\nElija la funcion que desea ejecutar: ");
  delay(500);

  

}

//----------------------------------------------------------------

void loop()
{
  //Menú
  Serial.println("\n");
  Serial.println("Ingrese 1 para comprobar que todos los leds de la matriz de 8x8 estan funcionando correctamente.");
  delay(100);
  Serial.println("Ingrese 2 para imprimir en la matriz un patron personalizado.");
  delay(100);
  Serial.println("Ingrese 3 mostrar una secuencia de patrones en la matriz.\n");
  //se recibe la opcion del usuario
  int opcion;
  while(1)
  {
    if(Serial.available())
    {
      opcion=Serial.parseInt();
      Serial.println(opcion);
      delay(1000);
      break;
    }
  }
  
  //VERIFICACION
  if(opcion==1)
  {
    Serial.println("VERIFICACION.");
    verificacion();
    opcion=0;
    delay(1000);
  }
  
  //IMAGEN
  else if(opcion==2)
  {
    Serial.println("IMAGEN.");
    IMAGEN();
    opcion=0;
    delay(1000);
  }
  
  //PUBLIK
  else if(opcion==3)
  {
    Serial.println("PUBLIK.");
    //publik()
    opcion=0;
    delay(1000);
  }
  else
  {
    Serial.println("Entrada invalida.");
    opcion=0;
    delay(2000);
  }
  
  


}
//----------------------------------------------------------------
//FUNCIONES:
void IMAGEN()
{
  Serial.println("Ingrese los segundos que desea ver la matriz encendida: ");
  while(1)
  {
    if(Serial.available())
    {
      unsigned long tiempo;
      tiempo=Serial.parseInt();
      imagen(tiempo);
      break;
    }
  }
}
  
//----------------------------------------------------------------

void imagen(unsigned long tiempo)
{
  Serial.println("ingrese 8 numeros: ");
  //matriz donde almacenaré el patron
  int numerosfilas[8][8];
  
  //se ingresan los 8 bits de cada fila
  for(int i=0;i<8;i++)
  {
  	long int num;
  	int numeros[8];
  	digitosfila(num, numeros);
    
    /*cada arreglo se ingresa en otro arreglo donde se almacenará la matriz.
    A la vez se muestra al usuario su entrada*/
    for(int j=0;j<8;j++)
    {
      numerosfilas[i][j]=numeros[j];
      Serial.print(numerosfilas[i][j]);
      Serial.print(" ");
    }
    Serial.println();
  }
  Serial.println();

  
  //prender los leds
  unsigned long int miliSeg;
  miliSeg=millis()+tiempo*1000;
  while(miliSeg>=millis())
  {
  	for(int i=7;i>=0;i--)
  	{
    	led(i, numerosfilas);
  	}
  }
  
}

//----------------------------------------------------------------

//toma cada digito de un long int y lo ingresa a un int array
void digitosfila(long int num, int numeros[])
{
  //Serial.println("ingrese 8 numeros: "); PA QUITAR
  
  /*el while en conjunto con un if que contiene un break, me garantiza
  una espera para que el usuario ingrese el número*/
  while(1)
  {
    if(Serial.available())
    {
      do{
      //long int num;
      num=Serial.parseInt();
      }while(num>11111111);
      //int numeros[8];
      for(int i=7;i>=0;i--)
      {
        numeros[i]=(num%10);
        num=(num/10);
      }
      
      break;
  	}
  }
}



//-----------------------------------------------------------

void led(int f, int numerosfilas[][8])
{


  for(int i=0;i<=7;i++)
  {
    digitalWrite(SER,numerosfilas[f][i]);
    pulsoColumna();
  }
  digitalWrite(SER, 0);
  for(int j=7;j>=f;j--)
  {
    pulsoFila();
    digitalWrite(SER, 1);
  }
  coutpulso();
  delay(1);
  apagarMatriz();
}

//-----------------------------------------------------------

void verificacion()
{
  Serial.println("Ingrese los segundos que desea ver la matriz encendida: ");
  while(1)
  {
    if(Serial.available())
    {
      int tiempo;
      tiempo=Serial.parseInt();
      flancoMatriz(tiempo);
      break;
    }
  }
}

void flancoMatriz(int tiempo)
{
  apagarMatriz();
  delay(50);
  encenderMatriz();
  delay(tiempo*1000);
  apagarMatriz();
  delay(50);
}

void apagarMatriz()
{
  for(int i=1;i<=8;i++)
  {
	digitalWrite(SER, 0);
    pulsoColumna();

    digitalWrite(SER, 1);
    pulsoFila();
  }
  coutpulso();
}

void encenderMatriz()
{
  for(int i=1;i<=8;i++)
  {
	digitalWrite(SER, 1);
    pulsoColumna();
    digitalWrite(SER, 0);
    pulsoFila();
  }
  coutpulso();
}
  
//-----------------------------------------------------------

//activaciones por flanco de subida
void pulsoColumna()
{
  digitalWrite(columnaEtapa1, LOW);
  digitalWrite(columnaEtapa1, HIGH);
  digitalWrite(columnaEtapa1, LOW);
}

void pulsoFila()
{
  digitalWrite(filaEtapa1, LOW);
  digitalWrite(filaEtapa1, HIGH);
  digitalWrite(filaEtapa1, LOW);
}

//pulso al output de ambos integrados
void coutpulso()
{
  digitalWrite(Etapa2, LOW);
  digitalWrite(Etapa2, HIGH);
  digitalWrite(Etapa2, LOW);

}

//-----------------------------------------------------------

//librería abecedario
void A()
{
}