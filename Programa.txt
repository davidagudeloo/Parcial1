/*
RESUMEN:
Este programa permite verificar, imprimir una sola imagen, e impirmir una 
serie de patrones en una matriz 8x8 de leds controlada por dos 74HC595.
Para ejecutar el programa navegue por el menú. Si desea ingresar una patrón, 
debe ingresar grupos de 8 dígitos, compuestos únicamente de 1 y 0.
Ejemplo:
-Su entrada podría ser: 11110000
Si desea ingresar un tiempo de visualización su entrada deberá ser un entero.
Ejemplo:
-Su entrada podría ser: 5
Revise el manual para mayor información.
Nota: verifique que el dato ingresado se 
muestre en pantalla antes de ingresar el siguiente dato. 
*/
//FUNCIONES:

//activaciones por flanco de subida
void pulsoColumna(); //flanco al shift register clock del integrado derecho
void pulsoFila();    //flanco al shift register clock del integrado izquierdo
void coutpulso();    //flanco al output register clock de ambos integrados

//VERIFICACIÓN DE TODOS LOS LEDS
void verificacion();

//otras
void flancoMatriz(int);//recibe el tiempo que se mostrará la verificacion
void apagarMatriz();
void encenderMatriz();

//MOSTRAR IMAGEN EN LA MATRIZ
void imagen();
void imagenImpresion(unsigned long);
void publik();
//otras
void digitosfila(long int, int numeros[]);//cada digito de un long int lo ingresa a un array
void led(int, int numerosfilas[][8]);//enciende los leds de una fila de acuerdo a un arreglo

//----------------------------------------------------------------

//DEFINO LOS PINES DE ENTRADA:

//input que controlará las entradas de ambos integrados
#define SER 4

//columnas:
//registro de almacenamiento de las columnas
#define columnaEtapa1 6
//filas:
//registro de almacenamiento de las filas
#define filaEtapa1 10

//registro de salida de ambos integrados:
#define Etapa2 5

//----------------------------------------------------------------

void setup()
{
  //inicializo el puerto serial
  Serial.begin(9600);
  
  //inicializo los pines digitales como salidas y en bajo
  int pines[4]={4,6,5,10};
  for(int i=0;i<4;i++)
  {
	pinMode(pines[i], OUTPUT);
	digitalWrite(pines[i], LOW);
  }
  
  //inicio el programa con la matriz apagada
  apagarMatriz(); 
  
  //Mensaje de bienvenida
  Serial.println();
  Serial.print("Bienvenido.\nElija la funcion que desea ejecutar: ");
  delay(500);

  

}

//----------------------------------------------------------------

void loop()
{
  //Menú
  Serial.println("\n");
  Serial.println("Ingrese 1 para comprobar que todos los leds de la matriz de 8x8 estan funcionando correctamente.");
  delay(100);
  Serial.println("Ingrese 2 para imprimir en la matriz un patron personalizado.");
  delay(100);
  Serial.println("Ingrese 3 mostrar una secuencia de patrones en la matriz.\n");
  //se recibe la opcion del usuario
  int opcion;
  while(1)
  {
    if(Serial.available())
    {
      opcion=Serial.parseInt();
      Serial.println(opcion);
      delay(1000);
      break;
    }
  }
  
  //VERIFICACION
  if(opcion==1)
  {
    Serial.println("VERIFICACION.");
    verificacion();
    opcion=0;
    delay(1000);
  }
  
  //IMAGEN
  else if(opcion==2)
  {
    Serial.println("IMAGEN.");
    imagen();
    opcion=0;
    delay(1000);
  }
  
  //PUBLIK
  else if(opcion==3)
  {
    Serial.println("PUBLIK.");
    publik();
    opcion=0;
    delay(1000);
  }
  
  //DEFAULT
  else
  {
    Serial.println("Entrada invalida.");
    opcion=0;
    delay(2000);
  }
  
  //"limpiar pantalla"
  Serial.println("\n");
}

//----------------------------------------------------------------

//FUNCIONES:

//activaciones por flanco de subida (SRCLK)
void pulsoColumna()
{
  digitalWrite(columnaEtapa1, LOW);
  digitalWrite(columnaEtapa1, HIGH);
  digitalWrite(columnaEtapa1, LOW);
}

void pulsoFila()
{
  digitalWrite(filaEtapa1, LOW);
  digitalWrite(filaEtapa1, HIGH);
  digitalWrite(filaEtapa1, LOW);
}

//pulso al output de ambos integrados (RCLK)
void coutpulso()
{
  digitalWrite(Etapa2, LOW);
  digitalWrite(Etapa2, HIGH);
  digitalWrite(Etapa2, LOW);

}

//-----------------------------------------------------------

void verificacion()
{
  Serial.println("Ingrese los segundos que desea ver la matriz encendida: ");
  while(1)
  {
    if(Serial.available())
    {
      int tiempo;
      tiempo=Serial.parseInt();//Se recibe el tiempo por medio del monitor serial
      Serial.println(tiempo);
      delay(1000);
      flancoMatriz(tiempo);//Se enciende la matriz
      break;
    }
  }
}

void flancoMatriz(int tiempo)
{
  apagarMatriz();
  delay(50);
  encenderMatriz();
  delay(tiempo*1000);//El tiempo se recibe en segundos y se transforma en milisegundos
  apagarMatriz();
  delay(50);
}

void apagarMatriz()
{
  for(int i=1;i<=8;i++)
  {
	digitalWrite(SER, 0);//La salida de los 8 pines (ánodos de los led)del integrado derecho será 0
    pulsoColumna();

    digitalWrite(SER, 1);//La salida de los 8 pines (cátodos de los led) del integrado izquierdo será 1
    pulsoFila();
  }
  coutpulso();
}

void encenderMatriz()
{
  for(int i=1;i<=8;i++)
  {
	digitalWrite(SER, 1);//La salida de los 8 pines (ánodos de los led) del integrado derecho será 1
    pulsoColumna();
    digitalWrite(SER, 0);//La salida de los 8 pines (cátodos de los led) del integrado izquierdo será 0
    pulsoFila();
  }
  coutpulso();
}
  
//-----------------------------------------------------------

void imagen()
{
  Serial.println("Ingrese los segundos que desea ver la matriz encendida: ");
  
  /*el while en conjunto con un if que contiene un break, me garantiza
  una espera para que el usuario ingrese el número*/
  
  while(1)
  {
    if(Serial.available())
    {
      unsigned long tiempo;
      tiempo=Serial.parseInt();//Se recibe el tiempo por medio del monitor serial
      Serial.println(tiempo);
      delay(1000);
      imagenImpresion(tiempo);//Se guarda matriz con el patrón 8x8 y se imprime
      break;
    }
  }
}
  
//----------------------------------------------------------------

void imagenImpresion(unsigned long tiempo)
{
  Serial.println("Ingrese el patron de 8x8, linea por linea: ");
  //matriz donde almacenará el patrón
  int numerosfilas[8][8];
  
  //se ingresan los 8 dígitos de cada fila
  for(int i=0;i<8;i++)
  {
  	long int num;//numero entero de 8 digitos
  	int numeros[8];
  	digitosfila(num, numeros);//Se llena el arreglo numeros con los dígitos de num
    
    /*Se almacena en la matriz 8x8 cada arreglo
    A la vez se muestra al usuario su entrada*/
    for(int j=0;j<8;j++)
    {
      numerosfilas[i][j]=numeros[j];
      Serial.print(numerosfilas[i][j]);
      Serial.print(" ");
    }
    Serial.println();
  }
  Serial.println();

  
  //prender los leds
  unsigned long int miliSeg;
  
  /*Se almacena en una variable (miliSeg) el tiempo pasado en milisegundos 
  desde el inicio de la ejecucion (millis) se le suma el tiempo ingresado*/
  
  miliSeg=millis()+tiempo*1000;
  while(miliSeg>=millis())
  {
  	for(int i=7;i>=0;i--)
  	{
    	led(i, numerosfilas); /*Como parámetros de led se utilizan el arreglo 8x8 y la fila que
      							se desea encender*/
  	}
  }
  
}

//----------------------------------------------------------------

//toma cada digito de un long int y lo ingresa a un int array
void digitosfila(long int num, int numeros[])
{
  
  while(1)
  {
    if(Serial.available())
    {
      do{
      
      num=Serial.parseInt();
      }while(num>11111111);
      
      for(int i=7;i>=0;i--)
      {
        numeros[i]=(num%10);// almacena el último dígito del número ingresado en la posición i del arreglo
        num=(num/10);//elimina el dígito previamente almacenado
      }
      
      break;
  	}
  }
}



//-----------------------------------------------------------

//Se recibe el número de fila y el arreglo con los 8 digitos de esta.
void led(int f, int numerosfilas[][8])
{


  for(int i=0;i<=7;i++)
  { 
    digitalWrite(SER,numerosfilas[f][i]); /*Se manda el digito (uno o cero) en la posición 
    							i del arreglo numerosfilas a los pines del integrado derecho*/
    										
    pulsoColumna();
  }
  digitalWrite(SER, 0); //Tierra
  for(int j=7;j>=f;j--)//Se lleva tierra a la fila f.
  {
    pulsoFila();
    digitalWrite(SER, 1); //Para las filas diferentes a f se utiliza el valor de 1 (diferente a tierra)
  }
  coutpulso();
  delay(1);
  apagarMatriz();
}

//-----------------------------------------------------------
void publik()
{
  Serial.println("Ingrese la cantidad de patrones que desea mostrar: ");
  int cant_pat; //Cantidad patrones
  while(1)
  {
    if(Serial.available())
    {
      cant_pat=Serial.parseInt();
      Serial.println(cant_pat);
      delay(1000);
      break;
    }
  }


  //arreglo donde se almacenará el tiempo de cada patrón
  //Se hace uso de la memoria dinámica pues no se conoce el tamaño del arreglo
  unsigned long *tiempoPatrones=new unsigned long[cant_pat];
  //matriz de tres dimensiones donde se almacenarán los patrones.
  int numerosfilas[cant_pat][8][8]; 


  for(int K=0;K<cant_pat;K++){// se ingresa matriz 8x8 y el tiempo de visualización para cada patrón
	Serial.print("Ingrese el tiempo de visualizacion del patron "); 
    Serial.print(K+1);
    Serial.println(": ");
    while(1)
    {
      if(Serial.available())
      {
        tiempoPatrones[K]=Serial.parseInt(); //Se almacena el tiempo de cada patrón
        Serial.println(tiempoPatrones[K]);
        delay(1000);
        break;
      }
    }
    Serial.print("Ingrese el patron numero ");
    Serial.print(K+1);
    Serial.println(" de 8x8, linea por linea : \n");
    
    for(int i=0;i<8;i++)//se ingresan los 8 bits de cada fila
    {
      long int num; //número entero de ocho dígitos
      int numeros[8]; //Se llena el arreglo numeros con los dígitos de num
      
      /*Se almacena en la matriz 8x8 cada arreglo a la vez se muestra 
      al usuario su entrada*/
      digitosfila(num, numeros);
      for(int j=0;j<8;j++)
      {

        numerosfilas[K][i][j]=numeros[j]; //ingresar 1 o 0 en la posición j de la fila i en el patrón k.
        Serial.print(numerosfilas[K][i][j]);
        Serial.print(" "); 

      }
      Serial.println();
    }
    Serial.println();
  }
  Serial.println();
  Serial.println("Patrones listos");
  //para cada patrón
  for(int K=0;K<cant_pat;K++)
  {
    //convierto los segundos ingresados a milis
    unsigned long int miliSeg;
    miliSeg=millis()+tiempoPatrones[K]*1000;
    
    //Para encender los leds.
    while(miliSeg>=millis())
    {
      for(int i=7;i>=0;i--)
      {
        led(i, numerosfilas[K]);/*Como parámetros de led se utilizan el arreglo 8x8 en la 
        						posición k y la fila que se desea encender*/
      }
    }
    apagarMatriz();
    delay(230);
  }
  delete[] tiempoPatrones;
}  

//-----------------------------------------------------------